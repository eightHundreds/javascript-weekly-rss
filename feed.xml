<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>web.dev</title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Wed, 09 Aug 2023 17:10:15 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[定义测试用例和优先级]]></title>
            <link>https://web.dev/ta-test-cases/</link>
            <guid>https://web.dev/ta-test-cases/</guid>
            <content:encoded><![CDATA[<div>
    <h1>GPT总结</h1>
    <summary>本文介绍了测试策略、测试所需的测试数量以及如何找到最合适的测试方法来获得最高的结果可信度，同时考虑资源限制。然而，这只是告诉我们需要测试多少的一个概念，你仍然需要确定具体要测试什么。

以下三个标准有助于理解测试中的期望结果，以及确定最适合的测试类型和详细程度：

1. 关注正常路径。这是应用程序的最常见或主要用户故事，用户会很快注意到错误。

2. 仔细决定详细程度。如果你的用例容易受到攻击或错误会造成严重损害，就需要更详细的测试。

3. 尽可能优先选择低级别的测试，如单元测试和集成测试，而不是高级别的端到端测试。

本文的其余部分探讨了这些标准，并介绍了如何定义测试用例。

测试用例是什么？

在软件开发中，测试用例是一系列行动或情况，旨在确认软件程序或应用程序的有效性。

测试用例旨在确保软件按计划运行，并且所有功能都能正确执行。软件测试人员或开发人员通常创建这些测试用例，以确保软件满足指定的要求和规范。

当运行测试用例时，软件会执行一系列检查，</summary>
    <div>
    <div>OriginTitle: Defining test cases and priorities</div>

    </div></div><p>在里面<a href="https://web.dev/ta-strategies/">上一篇文章</a>中，您了解了测试策略、测试应用程序所需的测试数量，以及如何找到最适合的测试以获得对结果的最大信心，同时牢记您的资源。 然而，这只是让我们知道要测试多少。 您仍然需要准确确定要测试的内容。 
 以下三个标准有助于了解测试中的预期内容以及了解哪种测试类型和详细程度最适合：</p>
<ol>
<li><strong>守护你的幸福之路</strong>。 这是应用程序最通用或主要的用户故事，用户很快就会注意到错误。</li>
<li><strong>仔细决定详细程度</strong>。 如果您的用例容易受到攻击或者错误会导致严重损害，请详细了解。</li>
<li><strong>优先考虑较低级别的测试</strong>，例如单元和集成测试，尽可能高于更高级别的端到端测试。</li>
</ol>
<p>本文的其余部分将探讨这些标准，以及它们在定义测试用例时如何应用。</p>
<h2 id="what-is-a-test-case">什么是测试用例？<a class="headline-link" href="https://web.dev/ta-test-cases/#what-is-a-test-case">#</a></h2>
<p>在软件开发中，测试用例是旨在确认软件程序或应用程序有效性的一系列操作或环境。 
 测试用例旨在确保软件按计划运行以及其所有特性和功能正确运行。 软件测试人员或开发人员通常创建这些测试用例以保证软件满足指定的要求和规范。</p>
<img alt="Test case is verifying." decoding="async" height="450" loading="lazy" sizes="(min-width: 800px) 800px, calc(100vw - 48px)" src="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format" srcset="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1600 1600w" width="800">
<p>运行测试用例时，软件会执行一系列检查以确保产生所需的结果。 在此过程中，测试将完成以下任务：</p>
<ul>
<li><strong>确认</strong>。 彻底检查软件以确保其正常运行的过程。 确定所创建的产品是否满足所有必要的非功能性要求并成功实现其预期目的至关重要。 它回答的问题是：“我们构建的产品正确吗？”</li>
<li><strong>验证</strong>。 确保软件产品满足必要标准或高级要求的过程。 它涉及检查实际产品是否与预期产品相符。 本质上，我们正在回答这个问题：“我们是否正在根据用户的需求构建正确的产品？”</li>
</ul>
<p>假设该程序未能提供预期结果。 在这种情况下，测试用例将成为信使，从而报告不成功的结果，开发人员或测试人员将需要调查问题并找到解决方案。 
 将检查和操作视为计算机遵循的路径，无论测试类型如何。 用于检查的输入数据或条件组称为“等价类”。 他们应该从被测系统中获得类似的行为或结果。 测试中执行的特定路径可能会有所不同，但应与测试中完成的活动和断言相匹配。</p>
<h2 id="test-paths-typical-kinds-of-test-cases">测试路径：典型的测试用例类型<a class="headline-link" href="https://web.dev/ta-test-cases/#test-paths-typical-kinds-of-test-cases">#</a></h2>
<p>在软件开发中，一个<a href="https://en.wikipedia.org/wiki/Happy_path" rel="noopener">测试用例</a>是预期并测试特定行为的代码执行场景。 通常，可以从三种场景中形成测试用例。</p>
<img alt="The happy path." decoding="async" height="450" loading="lazy" sizes="(min-width: 800px) 800px, calc(100vw - 48px)" src="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format" srcset="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1600 1600w" width="800">
<p>第一个是最著名的，您可能已经在使用它。 这是<em>幸福之路</em>，也称为“快乐日场景”或“黄金路径”。 它定义了您的功能、应用程序或变更的最常见用例——它应该为客户提供的方式。</p>
<img alt="The scary path." decoding="async" height="450" loading="lazy" sizes="(min-width: 800px) 800px, calc(100vw - 48px)" src="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format" srcset="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1600 1600w" width="800">
<p>测试用例中要涵盖的第二个最重要的测试路径通常会被忽略，因为它不舒服——正如它的名字所暗示的那样。 这是“可怕的道路”，或者换句话说，<em>阴性测试</em>。 此路径针对导致代码行为不当或进入错误状态的场景。 如果您的用例非常脆弱，给利益相关者或用户带来了高风险，那么测试这些场景就尤其重要。</p>
<p>您可能想了解并考虑使用其他一些路径，但通常它们不太常用。 下表总结了它们：</p>
<div class="table-wrapper scrollbar">
<table>
<thead>
<tr>
<th>测试路径</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>愤怒的路径</td>
<td>这会导致错误，但却是预料之中的错误； 例如，如果您想确保错误处理正确进行。</td>
</tr>
<tr>
<td>不良路径</td>
<td>此路径负责您的应用程序需要满足的任何与安全相关的场景。</td>
</tr>
<tr>
<td>荒凉的小路</td>
<td>在应用程序中测试场景的路径没有获得足够的数据来运行，例如测试空值。</td>
</tr>
<tr>
<td>健忘之路</td>
<td>在资源不足的情况下测试应用程序的行为，例如触发数据丢失。</td>
</tr>
<tr>
<td>犹豫不决的道路</td>
<td>与尝试在应用程序中执行操作或关注用户故事但尚未完成这些工作流程的用户进行测试。 例如，当用户中断其工作流程时可能会出现这种情况。</td>
</tr>
<tr>
<td>贪心路径</td>
<td>尝试使用大量输入或数据进行测试。</td>
</tr>
<tr>
<td>充满压力的道路</td>
<td>尝试以任何必要的方式对您的应用程序施加负载，直到它不再起作用（类似于负载测试）。</td>
</tr>
</tbody>
</table>
</div><p>有多种方法可以对这些路径进行分类。 两种常见的方法是：</p>
<ul>
<li><strong>等价划分</strong>。 一种将测试用例分类为组或分区的测试方法，从而帮助创建等价类。 这是基于这样的想法：如果分区中的一个测试用例发现了缺陷，则同一分区中的其他测试用例可能会发现类似的缺陷。 由于特定等价类中的所有输入应表现出相同的行为，因此您可以减少测试用例的数量。<a href="https://en.wikipedia.org/wiki/Equivalence_partitioning" rel="noopener">了解有关等价划分的更多信息</a>。</li>
<li><strong>极限分析</strong>。 一种测试方法，也称为<a href="https://en.wikipedia.org/wiki/Boundary-value_analysis" rel="noopener">边值分析</a>，它检查输入值的限制或极端，以查找在系统功能或约束限制下可能出现的任何潜在问题或错误。</li>
</ul>
<h2 id="best-practice-writing-test-cases">最佳实践：编写测试用例<a class="headline-link" href="https://web.dev/ta-test-cases/#best-practice-writing-test-cases">#</a></h2>
<p>测试人员编写的经典测试用例将包含特定的数据，以帮助您掌握要进行的测试的内容，当然还有执行测试。 典型的测试人员会在表格中记录他们的测试工作。 在这个阶段，我们可以使用两种模式，帮助我们构建测试用例，以及稍后构建我们的测试本身：</p>
<ul>
<li><strong>安排、行动、断言</strong>图案。 “安排、行动、断言”（也称为“AAA”或“Triple A”）测试模式是一种将测试组织为三个不同步骤的方法：安排测试，然后执行测试，最后但并非最不重要的一点是，得出结论。</li>
<li><strong>给定，何时，然后</strong>图案。 此模式与 AAA 模式类似，但有一些根源<a href="https://en.wikipedia.org/wiki/Behavior-driven_development" rel="noopener">行为驱动的发展</a>。</li>
</ul>
<p>一旦我们介绍了测试本身的结构，未来的文章将详细介绍这些模式。 如果您想在这个阶段深入了解这些模式，请查看这两篇文章：<a href="https://automationpanda.com/2020/07/07/arrange-act-assert-a-pattern-for-writing-good-tests/" rel="noopener">Arrange-Act-Assert：编写良好测试的模式</a>和<a href="https://martinfowler.com/bliki/GivenWhenThen.html" rel="noopener">给定-何时-然后</a>。</p>
<p>根据本文的所有知识，下表总结了一个经典示例：</p>
<div class="table-wrapper scrollbar">
<table>
<thead>
<tr>
<th>信息</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>先决条件</td>
<td>在编写测试之前需要完成的所有事情。</td>
</tr>
<tr>
<td>被测物体</td>
<td>需要验证什么？</td>
</tr>
<tr>
<td>输入数据</td>
<td>变量及其值。</td>
</tr>
<tr>
<td>需要执行的步骤</td>
<td>您为使测试变为现实而要做的所有事情：您在测试中所做的所有操作或交互。</td>
</tr>
<tr>
<td>预期结果</td>
<td>应该发生什么以及要满足哪些期望。</td>
</tr>
<tr>
<td>实际结果</td>
<td>实际发生了什么。</td>
</tr>
</tbody>
</table>
</div><p>在自动化测试中，您不需要以测试人员需要的方式记录所有这些测试用例，尽管这样做无疑是有帮助的。 如果您细心的话，您可以在测试中找到所有这些信息。 那么让我们将这个经典的测试用例转化为自动化测试。</p>
<div class="table-wrapper scrollbar">
<table>
<thead>
<tr>
<th>信息</th>
<th>转化为测试自动化</th>
</tr>
</thead>
<tbody>
<tr>
<td>先决条件</td>
<td>您需要的所有东西，安排测试，并考虑为实现测试场景而提供的内容。</td>
</tr>
<tr>
<td>被测物体</td>
<td>这个“对象”可以是各种东西：被测试的应用程序、流程、单元或组件。</td>
</tr>
<tr>
<td>输入数据</td>
<td>参数值。</td>
</tr>
<tr>
<td>需要执行的步骤</td>
<td>测试中执行的所有操作和命令、您执行的操作以及了解当您执行某些操作时会发生什么。</td>
</tr>
<tr>
<td>预期结果</td>
<td>您用于验证应用程序的断言，即您在应用程序中断言的内容。</td>
</tr>
<tr>
<td>实际结果</td>
<td>自动化测试的结果。</td>
</tr>
</tbody>
</table>
</div><aside class="aside flow bg-state-info-bg color-state-info-text"><div class=" flow">这篇博文由 Ramona 撰写，并接受了以下人士的意见和评论<a href="https://web.dev/authors/jecelynyeen/">叶洁琳</a>（<a href="https://twitter.com/jecfish">推特</a>),<a href="https://www.linkedin.com/in/michael-hablich-2128646/">迈克尔·哈布里奇</a>（<a href="https://twitter.com/MHablich">推特</a>）， 和<a href="https://web.dev/authors/rachelandrew/">雷切尔·安德鲁</a>。 特别感谢<a href="https://www.linkedin.com/in/sofia-yemelianova/">索菲亚·艾米利亚诺娃</a>用于支持出版过程。</div></aside>
<hr><p>In the <a href="https://web.dev/ta-strategies/">previous post</a>, you learned about testing strategies, the number of tests needed to test an application, and how to find the best fit to gain the most confidence in the results while bearing in mind your resources. However, this only gives us an idea of how much to test. You still need to determine exactly what to test.
The following three criteria can be helpful in understanding what to expect in a test and to see what testing type and level of detail might fit best:</p>
<ol>
<li><strong>Take care of your happy path</strong>. This is the most generic or primary user story of your application, where your user will notice an error very quickly.</li>
<li><strong>Decide carefully on the level of detail</strong>. Get into more detail if your use case is vulnerable or where an error would cause high damage.</li>
<li><strong>Prioritize lower-level tests</strong>, such as unit and integration tests, over higher-level end-to-end tests whenever possible.</li>
</ol>
<p>The rest of this article explores these criteria, and how they apply as you define test cases.</p>
<h2 id="what-is-a-test-case">What is a test case? <a class="headline-link" href="https://web.dev/ta-test-cases/#what-is-a-test-case">#</a></h2>
<p>In software development, a test case is a sequence of actions or circumstances that are devised to confirm the effectiveness of a software program or application.
A test case aims to ensure that the software operates as planned and that all its features and functions perform correctly. Software testers or developers typically create these test cases to guarantee that the software meets the specified requirements and specifications.</p>
<img alt="Test case is verifying." decoding="async" height="450" loading="lazy" sizes="(min-width: 800px) 800px, calc(100vw - 48px)" src="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format" srcset="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/Am7IXUF5DVMprZQsSA5p.jpeg?auto=format&amp;w=1600 1600w" width="800">
<p>When a test case is run, the software performs a series of checks to ensure it produces the desired results. While doing that, a test fulfills the following tasks:</p>
<ul>
<li><strong>Verification</strong>. The process of thoroughly checking software to ensure it functions without errors. Determining whether the created product meets all the necessary non-functional requirements and successfully achieves its intended purpose is crucial. The question it answers is: “Are we building the product right?”</li>
<li><strong>Validation</strong>. The process of ensuring that the software product meets the necessary standards or high-level requirements. It involves checking whether the actual product aligns with the expected product. Essentially, we’re answering the question: “Are we building the right product for the user’s requirements?”</li>
</ul>
<p>Suppose the program fails to deliver the expected outcome. In that case, the test case will be the messenger—thus reporting an unsuccessful result, and the developer or tester will need to investigate the issue and find a solution.
Think of the checks and actions as paths the computer follows, regardless of the testing type.  Groups of input data or conditions used for checking are called "equivalence classes". They should get similar behavior or results from the system under test. The specific paths executed inside a test may vary but should match the activities and assertions done in your test.</p>
<h2 id="test-paths-typical-kinds-of-test-cases">Test paths: Typical kinds of test cases <a class="headline-link" href="https://web.dev/ta-test-cases/#test-paths-typical-kinds-of-test-cases">#</a></h2>
<p>In software development, a <a href="https://en.wikipedia.org/wiki/Happy_path" rel="noopener">test case</a> is a code execution scenario from which a certain behavior is expected and tested. Typically, there are three scenarios to form test cases from.</p>
<img alt="The happy path." decoding="async" height="450" loading="lazy" sizes="(min-width: 800px) 800px, calc(100vw - 48px)" src="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format" srcset="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/SyLaoC8VQymTbBwIUd11.jpeg?auto=format&amp;w=1600 1600w" width="800">
<p>The first one is the most well known, which you are probably already using. It’s the <em>happy path</em>, also known as the “happy day scenario” or “golden path”. It defines the most common use case of your feature, application, or change—the way it should work out for the customer.</p>
<img alt="The scary path." decoding="async" height="450" loading="lazy" sizes="(min-width: 800px) 800px, calc(100vw - 48px)" src="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format" srcset="https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=200 200w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=228 228w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=260 260w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=296 296w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=338 338w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=385 385w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=439 439w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=500 500w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=571 571w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=650 650w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=741 741w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=845 845w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=964 964w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1098 1098w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1252 1252w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1428 1428w, https://web-dev.imgix.net/image/NJdAV9UgKuN8AhoaPBquL7giZQo1/7F0MGozRfVyyi3vn65No.jpeg?auto=format&amp;w=1600 1600w" width="800">
<p>The second most crucial test path to cover in your test cases is often left out as it’s uncomfortable—as its name may imply. It’s the “scary path” or, in other words, the <em>negative test</em>. This path targets scenarios that cause the code to misbehave or enter an error state. Testing these scenarios is especially important if you have highly vulnerable use cases imposing a high risk on the stakeholders or users.</p>
<p>There are some other paths you might want to know about and consider using, but typically they are less commonly used. The following table summarizes them:</p>
<div class="table-wrapper scrollbar">
<table>
<thead>
<tr>
<th>Test path</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Angry path</td>
<td>This leads to an error, but an expected one; for example, if you want to ensure error handling works correctly.</td>
</tr>
<tr>
<td>Delinquent path</td>
<td>This path takes care of any security-related scenarios your application needs to fulfill.</td>
</tr>
<tr>
<td>Desolate path</td>
<td>The path testing the scenario in your application doesn’t get enough data to function, for example, testing null values.</td>
</tr>
<tr>
<td>Forgetful path</td>
<td>Testing the behavior of your application with insufficient resources, for example, triggering a data loss.</td>
</tr>
<tr>
<td>Indecisive path</td>
<td>Testing with a user who is trying to do actions or following user stories in your application but hasn’t completed those workflows. This could be the case, for example, when the user interrupts their workflow.</td>
</tr>
<tr>
<td>Greedy path</td>
<td>Trying to test using vast amounts of inputs or data.</td>
</tr>
<tr>
<td>Stressful path</td>
<td>Trying to put a load on your application by any means necessary until it no longer functions (similar to a load test).</td>
</tr>
</tbody>
</table>
</div><p>There are several methods to categorize those paths. Two common approaches are:</p>
<ul>
<li><strong>Equivalence partitioning</strong>. A testing method that categorizes test cases into groups or partitions and, as a result, helps create equivalence classes. This is based on the idea that if one test case in a partition uncovers a defect, other test cases in the same partition will likely reveal similar defects. As all inputs within a specific equivalence class should exhibit identical behavior, you can decrease the number of test cases. <a href="https://en.wikipedia.org/wiki/Equivalence_partitioning" rel="noopener">Learn more about equivalence partitioning</a>.</li>
<li><strong>Limit analysis</strong>. A testing method, also known as <a href="https://en.wikipedia.org/wiki/Boundary-value_analysis" rel="noopener">boundary-value analysis</a>, that examines the limits or extremes of input values to find any potential issues or errors that might arise at the system's limits of capabilities or constraints.</li>
</ul>
<h2 id="best-practice-writing-test-cases">Best practice: Writing test cases <a class="headline-link" href="https://web.dev/ta-test-cases/#best-practice-writing-test-cases">#</a></h2>
<p>A classical test case written by a tester will contain specific data to help you grasp the content of the test you want to conduct and, of course, execute the test. A typical tester would document their testing efforts in a table. There are two patterns we can use at this stage, helping us to structure our test cases and later, our tests themselves, too:</p>
<ul>
<li><strong>Arrange, act, assert</strong> pattern. The "arrange, act, assert" (also known as the "AAA" or "Triple A") testing pattern is a way of organizing tests into three distinct steps: arranging the test, then performing the test, and last but not least, drawing conclusions.</li>
<li><strong>Given, when, then</strong> pattern. This pattern is similar to the AAA pattern but has some roots in <a href="https://en.wikipedia.org/wiki/Behavior-driven_development" rel="noopener">behavior-driven development</a>.</li>
</ul>
<p>Future articles will go into more details on these patterns, as soon as we cover the structure of a test itself. If you want to go deeper into these patterns at this stage, check out these two articles: <a href="https://automationpanda.com/2020/07/07/arrange-act-assert-a-pattern-for-writing-good-tests/" rel="noopener">Arrange-Act-Assert: A pattern for writing good tests</a> and <a href="https://martinfowler.com/bliki/GivenWhenThen.html" rel="noopener">Given-When-Then</a>.</p>
<p>According to all the learnings from this article, the following table summarizes a classic example:</p>
<div class="table-wrapper scrollbar">
<table>
<thead>
<tr>
<th>Information</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Prerequisites</td>
<td>Everything which needs to be done before writing the test.</td>
</tr>
<tr>
<td>Object under test</td>
<td>What needs to be verified?</td>
</tr>
<tr>
<td>Input data</td>
<td>Variables and their values.</td>
</tr>
<tr>
<td>Steps to be executed</td>
<td>All the things you will do to bring your test to life: all actions or interactions you do in your tests.</td>
</tr>
<tr>
<td>Expected result</td>
<td>What should happen and which expectations are to be fulfilled.</td>
</tr>
<tr>
<td>Actual result</td>
<td>What actually happens.</td>
</tr>
</tbody>
</table>
</div><p>In automated testing, you don’t need to document all these test cases in the way that a tester needs to, even though it’s undoubtedly helpful to do so. You can find all this information in your test if you pay attention. So let’s translate this classical test case into an automated test.</p>
<div class="table-wrapper scrollbar">
<table>
<thead>
<tr>
<th>Information</th>
<th>Translation into test automation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Prerequisites</td>
<td>All the things you need, arranging the test, and thinking about what is given to make your test’s scenario happen.</td>
</tr>
<tr>
<td>Object under test</td>
<td>This “object” can be various things: an application, flow, unit, or component under test.</td>
</tr>
<tr>
<td>Input data</td>
<td>Parameter values.</td>
</tr>
<tr>
<td>Steps to be executed</td>
<td>All the actions and commands executed inside your test, the things you act upon, and finding out what happens when you do certain things.</td>
</tr>
<tr>
<td>Expected result</td>
<td>The assertion you use to validate your application, the things you assert upon in your application.</td>
</tr>
<tr>
<td>Actual result</td>
<td>The result of your automated test.</td>
</tr>
</tbody>
</table>
</div><aside class="aside flow bg-state-info-bg color-state-info-text"><div class=" flow"> This blog post was written by Ramona, with input and review from <a href="https://web.dev/authors/jecelynyeen/">Jecelyn Yeen</a> (<a href="https://twitter.com/jecfish">Twitter</a>), <a href="https://www.linkedin.com/in/michael-hablich-2128646/">Michael Hablich</a> (<a href="https://twitter.com/MHablich">Twitter</a>), and <a href="https://web.dev/authors/rachelandrew/">Rachel Andrew</a>. Special thanks to <a href="https://www.linkedin.com/in/sofia-yemelianova/">Sofia Emelianova</a> for supporting the publication process. </div></aside>
]]></content:encoded>
        </item>
    </channel>
</rss>